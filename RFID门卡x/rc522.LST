C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN rc522.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE rc522.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <intrins.h>
   2          #include <REG52.H>
   3          
   4          #include "mian.h"
   5          #include "rc522.h"
   6          #define MAXRLEN 18
   7                                        
   8          /////////////////////////////////////////////////////////////////////
   9          //功    能：寻卡
  10          //参数说明: req_code[IN]:寻卡方式
  11          //                0x52 = 寻感应区内所有符合14443A标准的卡
  12          //                0x26 = 寻未进入休眠状态的卡
  13          //          pTagType[OUT]：卡片类型代码
  14          //                0x4400 = Mifare_UltraLight
  15          //                0x0400 = Mifare_One(S50)
  16          //                0x0200 = Mifare_One(S70)
  17          //                0x0800 = Mifare_Pro(X)
  18          //                0x4403 = Mifare_DESFire
  19          //返    回: 成功返回MI_OK
  20          /////////////////////////////////////////////////////////////////////
  21          
  22          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  23          {
  24   1         char status;  
  25   1         unsigned int  unLen;
  26   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  27   1      
  28   1         ClearBitMask(Status2Reg,0x08);
  29   1         WriteRawRC(BitFramingReg,0x07);
  30   1         SetBitMask(TxControlReg,0x03);
  31   1       
  32   1         ucComMF522Buf[0] = req_code;
  33   1      
  34   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  35   1         
  36   1         if ((status == MI_OK) && (unLen == 0x10))
  37   1         {    
  38   2             *pTagType     = ucComMF522Buf[0];
  39   2             *(pTagType+1) = ucComMF522Buf[1];
  40   2         }
  41   1         else
  42   1         {   status = MI_ERR;   }
  43   1         
  44   1         return status;
  45   1      }
  46          /////////////////////////////////////////////////////////////////////
  47          //功    能：防冲撞
  48          //参数说明: pSnr[OUT]:卡片序列号，4字节
  49          //返    回: 成功返回MI_OK
  50          /////////////////////////////////////////////////////////////////////  
  51          char PcdAnticoll(unsigned char *pSnr)
  52          {
  53   1          char status;
  54   1          unsigned char i,snr_check=0;
  55   1          unsigned int  unLen;
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 2   

  56   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  57   1          
  58   1      
  59   1          ClearBitMask(Status2Reg,0x08);
  60   1          WriteRawRC(BitFramingReg,0x00);
  61   1          ClearBitMask(CollReg,0x80);
  62   1       
  63   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  64   1          ucComMF522Buf[1] = 0x20;
  65   1      
  66   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  67   1      
  68   1          if (status == MI_OK)
  69   1          {
  70   2             for (i=0; i<4; i++)
  71   2               {   
  72   3                   *(pSnr+i)  = ucComMF522Buf[i];
  73   3                   snr_check ^= ucComMF522Buf[i];
  74   3               }
  75   2               if (snr_check != ucComMF522Buf[i])
  76   2               {   status = MI_ERR;    }
  77   2          }
  78   1          
  79   1          SetBitMask(CollReg,0x80);
  80   1          return status;
  81   1      }
  82          
  83          /////////////////////////////////////////////////////////////////////
  84          //功    能：选定卡片
  85          //参数说明: pSnr[IN]:卡片序列号，4字节
  86          //返    回: 成功返回MI_OK
  87          
  88          /////////////////////////////////////////////////////////////////////
  89          /*char PcdSelect(unsigned char *pSnr)
  90          {
  91              char status;
  92              unsigned char i;
  93              unsigned int  unLen;
  94              unsigned char ucComMF522Buf[MAXRLEN]; 
  95              
  96              ucComMF522Buf[0] = PICC_ANTICOLL1;
  97              ucComMF522Buf[1] = 0x70;
  98              ucComMF522Buf[6] = 0;
  99              for (i=0; i<4; i++)
 100              {
 101                ucComMF522Buf[i+2] = *(pSnr+i);
 102                ucComMF522Buf[6]  ^= *(pSnr+i);
 103              }
 104              CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 105            
 106              ClearBitMask(Status2Reg,0x08);
 107          
 108              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
 109              
 110              if ((status == MI_OK) && (unLen == 0x18))
 111              {   status = MI_OK;  }
 112              else
 113              {   status = MI_ERR;    }
 114          
 115              return status;
 116          }
 117           */
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 3   

 118          /////////////////////////////////////////////////////////////////////
 119          //功    能：验证卡片密码
 120          //参数说明: auth_mode[IN]: 密码验证模式
 121          //                 0x60 = 验证A密钥
 122          //                 0x61 = 验证B密钥 
 123          //          addr[IN]：块地址
 124          //          pKey[IN]：密码
 125          //          pSnr[IN]：卡片序列号，4字节
 126          //返    回: 成功返回MI_OK
 127          /////////////////////////////////////////////////////////////////////               
 128          /*char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 129          {
 130              char status;
 131              unsigned int  unLen;
 132              unsigned char i,ucComMF522Buf[MAXRLEN]; 
 133          
 134              ucComMF522Buf[0] = auth_mode;
 135              ucComMF522Buf[1] = addr;
 136              for (i=0; i<6; i++)
 137              {    ucComMF522Buf[i+2] = *(pKey+i);   }
 138              for (i=0; i<6; i++)
 139              {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 140           //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 141           //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 142              
 143              status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 144              if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 145              {   status = MI_ERR;   }
 146              
 147              return status;
 148          }
 149            */
 150          /////////////////////////////////////////////////////////////////////
 151          //功    能：读取M1卡一块数据
 152          //参数说明: addr[IN]：块地址
 153          //          pData[OUT]：读出的数据，16字节
 154          //返    回: 成功返回MI_OK
 155          ///////////////////////////////////////////////////////////////////// 
 156          /*char PcdRead(unsigned char addr,unsigned char *pData)
 157          {
 158              char status;
 159              unsigned int  unLen;
 160              unsigned char i,ucComMF522Buf[MAXRLEN]; 
 161          
 162              ucComMF522Buf[0] = PICC_READ;
 163              ucComMF522Buf[1] = addr;
 164              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 165             
 166              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 167              if ((status == MI_OK) && (unLen == 0x90))
 168           //   {   memcpy(pData, ucComMF522Buf, 16);   }
 169              {
 170                  for (i=0; i<16; i++)
 171                  {    *(pData+i) = ucComMF522Buf[i];   }
 172              }
 173              else
 174              {   status = MI_ERR;   }
 175              
 176              return status;
 177          }
 178           */
 179          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 4   

 180          //功    能：写数据到M1卡一块
 181          //参数说明: addr[IN]：块地址
 182          //          pData[IN]：写入的数据，16字节
 183          //返    回: 成功返回MI_OK
 184          /////////////////////////////////////////////////////////////////////                  
 185          /*char PcdWrite(unsigned char addr,unsigned char *pData)
 186          {
 187              char status;
 188              unsigned int  unLen;
 189              unsigned char i,ucComMF522Buf[MAXRLEN]; 
 190              
 191              ucComMF522Buf[0] = PICC_WRITE;
 192              ucComMF522Buf[1] = addr;
 193              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 194           
 195              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 196          
 197              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 198              {   status = MI_ERR;   }
 199                  
 200              if (status == MI_OK)
 201              {
 202                  //memcpy(ucComMF522Buf, pData, 16);
 203                  for (i=0; i<16; i++)
 204                  {    ucComMF522Buf[i] = *(pData+i);   }
 205                  CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 206          
 207                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 208                  if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 209                  {   status = MI_ERR;   }
 210              }
 211              
 212              return status;
 213          }
 214           */
 215          /////////////////////////////////////////////////////////////////////
 216          //功    能：扣款和充值
 217          //参数说明: dd_mode[IN]：命令字
 218          //               0xC0 = 扣款
 219          //               0xC1 = 充值
 220          //          addr[IN]：钱包地址
 221          //          pValue[IN]：4字节增(减)值，低位在前
 222          //返    回: 成功返回MI_OK
 223          /////////////////////////////////////////////////////////////////////                 
 224          // char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 225          // {
 226          //  char status;
 227          //  unsigned int  unLen;
 228          //  unsigned char i,ucComMF522Buf[MAXRLEN]; 
 229          //  
 230          //  ucComMF522Buf[0] = dd_mode;
 231          //  ucComMF522Buf[1] = addr;
 232          //  CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 233          
 234          //  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 235          
 236          //  if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 237          //  {   status = MI_ERR;   }
 238          //      
 239          //  if (status == MI_OK)
 240          //  {
 241          //     // memcpy(ucComMF522Buf, pValue, 4);
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 5   

 242          //      for (i=0; i<16; i++)
 243          //      {    ucComMF522Buf[i] = *(pValue+i);   }
 244          //      CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 245          //      unLen = 0;
 246          //      status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 247          //      if (status != MI_ERR)
 248          //      {    status = MI_OK;    }
 249          //  }
 250          //  
 251          //  if (status == MI_OK)
 252          //  {
 253          //      ucComMF522Buf[0] = PICC_TRANSFER;
 254          //      ucComMF522Buf[1] = addr;
 255          //      CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 256          //  
 257          //      status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 258          
 259          //      if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 260          //      {   status = MI_ERR;   }
 261          //  }
 262          //  return status;
 263          // }
 264          
 265          /////////////////////////////////////////////////////////////////////
 266          //功    能：备份钱包
 267          //参数说明: sourceaddr[IN]：源地址
 268          //          goaladdr[IN]：目标地址
 269          //返    回: 成功返回MI_OK
 270          /////////////////////////////////////////////////////////////////////
 271          // char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 272          // {
 273          //     char status;
 274          //     unsigned int  unLen;
 275          //     unsigned char ucComMF522Buf[MAXRLEN]; 
 276          
 277          //     ucComMF522Buf[0] = PICC_RESTORE;
 278          //     ucComMF522Buf[1] = sourceaddr;
 279          //     CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 280          //  
 281          //     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 282          
 283          //     if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 284          //     {   status = MI_ERR;   }
 285          //     
 286          //     if (status == MI_OK)
 287          //     {
 288          //         ucComMF522Buf[0] = 0;
 289          //         ucComMF522Buf[1] = 0;
 290          //         ucComMF522Buf[2] = 0;
 291          //         ucComMF522Buf[3] = 0;
 292          //         CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 293          //  
 294          //         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 295          //         if (status != MI_ERR)
 296          //         {    status = MI_OK;    }
 297          //     }
 298          //     
 299          //     if (status != MI_OK)
 300          //     {    return MI_ERR;   }
 301          //     
 302          //     ucComMF522Buf[0] = PICC_TRANSFER;
 303          //     ucComMF522Buf[1] = goaladdr;
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 6   

 304          
 305          //     CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 306          //  
 307          //     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 308          
 309          //     if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 310          //     {   status = MI_ERR;   }
 311          
 312          //     return status;
 313          // }
 314          
 315          
 316          /////////////////////////////////////////////////////////////////////
 317          //功    能：命令卡片进入休眠状态
 318          //返    回: 成功返回MI_OK
 319          /////////////////////////////////////////////////////////////////////
 320          char PcdHalt(void)
 321          {
 322   1          char status;
 323   1          unsigned int  unLen;
 324   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 325   1      
 326   1          ucComMF522Buf[0] = PICC_HALT;
 327   1          ucComMF522Buf[1] = 0;
 328   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 329   1       
 330   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 331   1      
 332   1          return MI_OK;
 333   1      }
 334          
 335          /////////////////////////////////////////////////////////////////////
 336          //用MF522计算CRC16函数
 337          /////////////////////////////////////////////////////////////////////
 338          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 339          {
 340   1          unsigned char i,n;
 341   1          ClearBitMask(DivIrqReg,0x04);
 342   1          WriteRawRC(CommandReg,PCD_IDLE);
 343   1          SetBitMask(FIFOLevelReg,0x80);
 344   1          for (i=0; i<len; i++)
 345   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 346   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 347   1          i = 0xFF;
 348   1          do 
 349   1          {
 350   2              n = ReadRawRC(DivIrqReg);
 351   2              i--;
 352   2          }
 353   1          while ((i!=0) && !(n&0x04));
 354   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 355   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 356   1      }
 357           
 358          /////////////////////////////////////////////////////////////////////
 359          //功    能：复位RC522
 360          //返    回: 成功返回MI_OK
 361          /////////////////////////////////////////////////////////////////////
 362          char PcdReset(void)
 363          {
 364   1          MF522_RST=1;
 365   1          _nop_();
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 7   

 366   1          MF522_RST=0;
 367   1          _nop_();
 368   1          MF522_RST=1;
 369   1           _nop_();
 370   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 371   1          _nop_();
 372   1          
 373   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 374   1          WriteRawRC(TReloadRegL,30);           
 375   1          WriteRawRC(TReloadRegH,0);
 376   1          WriteRawRC(TModeReg,0x8D);
 377   1          WriteRawRC(TPrescalerReg,0x3E);
 378   1          WriteRawRC(TxAutoReg,0x40);     
 379   1          return MI_OK;
 380   1      }
 381          //////////////////////////////////////////////////////////////////////
 382          //设置RC632的工作方式 
 383          //////////////////////////////////////////////////////////////////////
 384          char M500PcdConfigISOType(unsigned char type)
 385          {
 386   1         if (type == 'A')                     //ISO14443_A
 387   1         { 
 388   2             ClearBitMask(Status2Reg,0x08);
 389   2      
 390   2       /*     WriteRawRC(CommandReg,0x20);    //as default   
 391   2             WriteRawRC(ComIEnReg,0x80);     //as default
 392   2             WriteRawRC(DivlEnReg,0x0);      //as default
 393   2           WriteRawRC(ComIrqReg,0x04);     //as default
 394   2           WriteRawRC(DivIrqReg,0x0);      //as default
 395   2           WriteRawRC(Status2Reg,0x0);//80    //trun off temperature sensor
 396   2           WriteRawRC(WaterLevelReg,0x08); //as default
 397   2             WriteRawRC(ControlReg,0x20);    //as default
 398   2           WriteRawRC(CollReg,0x80);    //as default
 399   2      */
 400   2             WriteRawRC(ModeReg,0x3D);//3F
 401   2      /*     WriteRawRC(TxModeReg,0x0);      //as default???
 402   2           WriteRawRC(RxModeReg,0x0);      //as default???
 403   2           WriteRawRC(TxControlReg,0x80);  //as default???
 404   2      
 405   2           WriteRawRC(TxSelReg,0x10);      //as default???
 406   2         */
 407   2             WriteRawRC(RxSelReg,0x86);//84
 408   2       //      WriteRawRC(RxThresholdReg,0x84);//as default
 409   2       //      WriteRawRC(DemodReg,0x4D);      //as default
 410   2      
 411   2       //      WriteRawRC(ModWidthReg,0x13);//26
 412   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 413   2        /*   WriteRawRC(GsNReg,0x88);        //as default???
 414   2           WriteRawRC(CWGsCfgReg,0x20);    //as default???
 415   2             WriteRawRC(ModGsCfgReg,0x20);   //as default???
 416   2      */
 417   2             WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 418   2           WriteRawRC(TReloadRegH,0);
 419   2             WriteRawRC(TModeReg,0x8D);
 420   2           WriteRawRC(TPrescalerReg,0x3E);
 421   2           
 422   2      
 423   2        //     PcdSetTmo(106);
 424   2             DelayMs(1);
 425   2             PcdAntennaOn();
 426   2         }
 427   1         else{ return -1; }
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 8   

 428   1         
 429   1         return MI_OK;
 430   1      }
 431          /////////////////////////////////////////////////////////////////////
 432          //功    能：读RC632寄存器
 433          //参数说明：Address[IN]:寄存器地址
 434          //返    回：读出的值
 435          /////////////////////////////////////////////////////////////////////
 436          unsigned char ReadRawRC(unsigned char Address)
 437          {
 438   1           unsigned char i, ucAddr;
 439   1           unsigned char ucResult=0;
 440   1      
 441   1           MF522_SCK = 0;
 442   1           MF522_NSS = 0;
 443   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 444   1      
 445   1           for(i=8;i>0;i--)
 446   1           {
 447   2               MF522_SI = ((ucAddr&0x80)==0x80);
 448   2               MF522_SCK = 1;
 449   2               ucAddr <<= 1;
 450   2               MF522_SCK = 0;
 451   2           }
 452   1      
 453   1           for(i=8;i>0;i--)
 454   1           {
 455   2               MF522_SCK = 1;
 456   2               ucResult <<= 1;
 457   2               ucResult|=(bit)MF522_SO;
 458   2               MF522_SCK = 0;
 459   2           }
 460   1      
 461   1           MF522_NSS = 1;
 462   1           MF522_SCK = 1;
 463   1           return ucResult;
 464   1      }
 465          
 466          /////////////////////////////////////////////////////////////////////
 467          //功    能：写RC632寄存器
 468          //参数说明：Address[IN]:寄存器地址
 469          //          value[IN]:写入的值
 470          /////////////////////////////////////////////////////////////////////
 471          void WriteRawRC(unsigned char Address, unsigned char value)
 472          {  
 473   1          unsigned char i, ucAddr;
 474   1      
 475   1          MF522_SCK = 0;
 476   1          MF522_NSS = 0;
 477   1          ucAddr = ((Address<<1)&0x7E);
 478   1      
 479   1          for(i=8;i>0;i--)
 480   1          {
 481   2              MF522_SI = ((ucAddr&0x80)==0x80);
 482   2              MF522_SCK = 1;
 483   2              ucAddr <<= 1;
 484   2              MF522_SCK = 0;
 485   2          }
 486   1      
 487   1          for(i=8;i>0;i--)
 488   1          {
 489   2              MF522_SI = ((value&0x80)==0x80);
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 9   

 490   2              MF522_SCK = 1;
 491   2              value <<= 1;
 492   2              MF522_SCK = 0;
 493   2          }
 494   1          MF522_NSS = 1;
 495   1          MF522_SCK = 1;
 496   1      }
 497          
 498          /////////////////////////////////////////////////////////////////////
 499          //功    能：置RC522寄存器位
 500          //参数说明：reg[IN]:寄存器地址
 501          //          mask[IN]:置位值
 502          /////////////////////////////////////////////////////////////////////
 503          void SetBitMask(unsigned char reg,unsigned char mask)  
 504          {
 505   1          char tmp = 0x0;
 506   1          tmp = ReadRawRC(reg);
 507   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 508   1      }
 509          
 510          /////////////////////////////////////////////////////////////////////
 511          //功    能：清RC522寄存器位
 512          //参数说明：reg[IN]:寄存器地址
 513          //          mask[IN]:清位值
 514          /////////////////////////////////////////////////////////////////////
 515          void ClearBitMask(unsigned char reg,unsigned char mask)  
 516          {
 517   1          char tmp = 0x0;
 518   1          tmp = ReadRawRC(reg);
 519   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 520   1      } 
 521          
 522          /////////////////////////////////////////////////////////////////////
 523          //功    能：通过RC522和ISO14443卡通讯
 524          //参数说明：Command[IN]:RC522命令字
 525          //          pInData[IN]:通过RC522发送到卡片的数据
 526          //          InLenByte[IN]:发送数据的字节长度
 527          //          pOutData[OUT]:接收到的卡片返回数据
 528          //          *pOutLenBit[OUT]:返回数据的位长度
 529          /////////////////////////////////////////////////////////////////////
 530          char PcdComMF522(unsigned char Command, 
 531                           unsigned char *pInData, 
 532                           unsigned char InLenByte,
 533                           unsigned char *pOutData, 
 534                           unsigned int  *pOutLenBit)
 535          {
 536   1          char status = MI_ERR;
 537   1          unsigned char irqEn   = 0x00;
 538   1          unsigned char waitFor = 0x00;
 539   1          unsigned char lastBits;
 540   1          unsigned char n;
 541   1          unsigned int i;
 542   1          switch (Command)
 543   1          {
 544   2             case PCD_AUTHENT:
 545   2                irqEn   = 0x12;
 546   2                waitFor = 0x10;
 547   2                break;
 548   2             case PCD_TRANSCEIVE:
 549   2                irqEn   = 0x77;
 550   2                waitFor = 0x30;
 551   2                break;
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 10  

 552   2             default:
 553   2               break;
 554   2          }
 555   1         
 556   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 557   1          ClearBitMask(ComIrqReg,0x80);
 558   1          WriteRawRC(CommandReg,PCD_IDLE);
 559   1          SetBitMask(FIFOLevelReg,0x80);
 560   1          
 561   1          for (i=0; i<InLenByte; i++)
 562   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 563   1          WriteRawRC(CommandReg, Command);
 564   1         
 565   1          
 566   1          if (Command == PCD_TRANSCEIVE)
 567   1          {    SetBitMask(BitFramingReg,0x80);  }
 568   1          
 569   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 570   1       i = 2000;
 571   1          do 
 572   1          {
 573   2               n = ReadRawRC(ComIrqReg);
 574   2               i--;
 575   2          }
 576   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 577   1          ClearBitMask(BitFramingReg,0x80);
 578   1              
 579   1          if (i!=0)
 580   1          {    
 581   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 582   2               {
 583   3                   status = MI_OK;
 584   3                   if (n & irqEn & 0x01)
 585   3                   {   status = MI_NOTAGERR;   }
 586   3                   if (Command == PCD_TRANSCEIVE)
 587   3                   {
 588   4                      n = ReadRawRC(FIFOLevelReg);
 589   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 590   4                      if (lastBits)
 591   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 592   4                      else
 593   4                      {   *pOutLenBit = n*8;   }
 594   4                      if (n == 0)
 595   4                      {   n = 1;    }
 596   4                      if (n > MAXRLEN)
 597   4                      {   n = MAXRLEN;   }
 598   4                      for (i=0; i<n; i++)
 599   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 600   4                  }
 601   3               }
 602   2               else
 603   2               {   status = MI_ERR;   }
 604   2              
 605   2         }
 606   1         
 607   1      
 608   1         SetBitMask(ControlReg,0x80);           // stop timer now
 609   1         WriteRawRC(CommandReg,PCD_IDLE); 
 610   1         return status;
 611   1      }
 612          
 613          
C51 COMPILER V9.00   RC522                                                                 01/30/2015 11:09:39 PAGE 11  

 614          /////////////////////////////////////////////////////////////////////
 615          //开启天线  
 616          //每次启动或关闭天险发射之间应至少有1ms的间隔
 617          /////////////////////////////////////////////////////////////////////
 618          void PcdAntennaOn()
 619          {
 620   1          unsigned char i;
 621   1          i = ReadRawRC(TxControlReg);
 622   1          if (!(i & 0x03))
 623   1          {
 624   2              SetBitMask(TxControlReg, 0x03);
 625   2          }
 626   1      }
 627          
 628          
 629          /////////////////////////////////////////////////////////////////////
 630          //关闭天线
 631          /////////////////////////////////////////////////////////////////////
 632          void PcdAntennaOff()
 633          {
 634   1          ClearBitMask(TxControlReg, 0x03);
 635   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1092    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      95
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
